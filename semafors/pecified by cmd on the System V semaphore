SHMOP(2)                         Linux Programmer's Manual                         SHMOP(2)

NNAAMMEE
       shmat, shmdt - System V shared memory operations

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ssyyss//sshhmm..hh>>

       vvooiidd **sshhmmaatt((iinntt _s_h_m_i_d,, ccoonnsstt vvooiidd **_s_h_m_a_d_d_r,, iinntt _s_h_m_f_l_g));;

       iinntt sshhmmddtt((ccoonnsstt vvooiidd **_s_h_m_a_d_d_r));;

DDEESSCCRRIIPPTTIIOONN
   sshhmmaatt(())
       sshhmmaatt()  attaches  the  System V  shared  memory  segment identified by _s_h_m_i_d to the
       address space of the calling process.  The attaching address is specified by _s_h_m_a_d_d_r
       with one of the following criteria:

       *  If  _s_h_m_a_d_d_r  is NULL, the system chooses a suitable (unused) page-aligned address
          to attach the segment.

       *  If _s_h_m_a_d_d_r isn't NULL and SSHHMM__RRNNDD is specified in _s_h_m_f_l_g, the  attach  occurs  at
          the address equal to _s_h_m_a_d_d_r rounded down to the nearest multiple of SSHHMMLLBBAA.

       *  Otherwise, _s_h_m_a_d_d_r must be a page-aligned address at which the attach occurs.

       In  addition to SSHHMM__RRNNDD, the following flags may be specified in the _s_h_m_f_l_g bit-mask
       argument:

       SSHHMM__EEXXEECC (Linux-specific; since Linux 2.6.9)
              Allow the contents of the segment to be executed.  The caller must have  exe‐
              cute permission on the segment.

       SSHHMM__RRDDOONNLLYY
              Attach  the segment for read-only access.  The process must have read permis‐
              sion for the segment.  If this flag is not specified, the segment is attached
              for  read  and write access, and the process must have read and write permis‐
              sion for the segment.  There is no notion of a write-only shared memory  seg‐
              ment.

       SSHHMM__RREEMMAAPP (Linux-specific)
              This flag specifies that the mapping of the segment should replace any exist‐
              ing mapping in the range starting at _s_h_m_a_d_d_r and continuing for the  size  of
              the  segment.   (Normally,  an EEIINNVVAALL error would result if a mapping already
              exists in this address range.)  In this case, _s_h_m_a_d_d_r must not be NULL.

       The bbrrkk(2) value of the calling process is not altered by the attach.   The  segment
       will automatically be detached at process exit.  The same segment may be attached as
       a read and as a read-write one, and more than once, in the process's address space.

       A successful sshhmmaatt() call updates the members of the _s_h_m_i_d___d_s  structure  (see  sshhmm‐‐
       ccttll(2)) associated with the shared memory segment as follows:

              _s_h_m___a_t_i_m_e is set to the current time.

              _s_h_m___l_p_i_d is set to the process-ID of the calling process.

              _s_h_m___n_a_t_t_c_h is incremented by one.

   sshhmmddtt(())
       sshhmmddtt()  detaches  the  shared  memory  segment  located at the address specified by
       _s_h_m_a_d_d_r from the address space of the calling process.  The  to-be-detached  segment
       must be currently attached with _s_h_m_a_d_d_r equal to the value returned by the attaching
       sshhmmaatt() call.

       On a successful sshhmmddtt() call, the system updates the members of the _s_h_m_i_d___d_s  struc‐
       ture associated with the shared memory segment as follows:

              _s_h_m___d_t_i_m_e is set to the current time.

              _s_h_m___l_p_i_d is set to the process-ID of the calling process.

              _s_h_m___n_a_t_t_c_h  is decremented by one.  If it becomes 0 and the segment is marked
              for deletion, the segment is deleted.

RREETTUURRNN VVAALLUUEE
       On success, sshhmmaatt() returns the address of the attached shared  memory  segment;  on
       error, _(_v_o_i_d _*_) _-_1 is returned, and _e_r_r_n_o is set to indicate the cause of the error.

       On success, sshhmmddtt() returns 0; on error -1 is returned, and _e_r_r_n_o is set to indicate
       the cause of the error.

EERRRROORRSS
       When sshhmmaatt() fails, _e_r_r_n_o is set to one of the following:

       EEAACCCCEESS The calling process does not have the required permissions for the  requested
              attach  type,  and  does  not  have  the CCAAPP__IIPPCC__OOWWNNEERR capability in the user
              namespace that governs its IPC namespace.

       EEIIDDRRMM  _s_h_m_i_d points to a removed identifier.

       EEIINNVVAALL Invalid _s_h_m_i_d value, unaligned (i.e., not page-aligned and  SSHHMM__RRNNDD  was  not
              specified)  or  invalid _s_h_m_a_d_d_r value, or can't attach segment at _s_h_m_a_d_d_r, or
              SSHHMM__RREEMMAAPP was specified and _s_h_m_a_d_d_r was NULL.

       EENNOOMMEEMM Could not allocate memory for the descriptor or for the page tables.

       When sshhmmddtt() fails, _e_r_r_n_o is set as follows:

       EEIINNVVAALL There is no shared memory segment attached at _s_h_m_a_d_d_r;  or,  _s_h_m_a_d_d_r  is  not
              aligned on a page boundary.

CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, SVr4.

       In  SVID  3  (or perhaps earlier), the type of the _s_h_m_a_d_d_r argument was changed from
       _c_h_a_r _* into _c_o_n_s_t _v_o_i_d _*, and the returned type of sshhmmaatt() from _c_h_a_r _* into _v_o_i_d _*.

NNOOTTEESS
       After a ffoorrkk(2), the child inherits the attached shared memory segments.

       After an eexxeeccvvee(2), all attached  shared  memory  segments  are  detached  from  the
       process.

       Upon __eexxiitt(2), all attached shared memory segments are detached from the process.

       Using sshhmmaatt() with _s_h_m_a_d_d_r equal to NULL is the preferred, portable way of attaching
       a shared memory segment.  Be aware that the shared memory segment attached  in  this
       way  may  be attached at different addresses in different processes.  Therefore, any
       pointers maintained within the shared memory must be made relative (typically to the
       starting address of the segment), rather than absolute.

       On  Linux,  it  is  possible to attach a shared memory segment even if it is already
       marked to be deleted.  However, POSIX.1 does not  specify  this  behavior  and  many
       other implementations do not support it.

       The following system parameter affects sshhmmaatt():

       SSHHMMLLBBAA Segment  low boundary address multiple.  When explicitly specifying an attach
              address in a call to sshhmmaatt(), the caller should ensure that the address is  a
              multiple  of  this  value.  This is necessary on some architectures, in order
              either to ensure good CPU cache  performance  or  to  ensure  that  different
              attaches  of  the  same  segment  have consistent views within the CPU cache.
              SSHHMMLLBBAA is normally some multiple of the system page  size.   (On  many  Linux
              architectures, SSHHMMLLBBAA is the same as the system page size.)

       The  implementation  places  no  intrinsic per-process limit on the number of shared
       memory segments (SSHHMMSSEEGG).

SSEEEE AALLSSOO
       bbrrkk(2), mmmmaapp(2), sshhmmccttll(2), sshhmmggeett(2), ccaappaabbiilliittiieess(7), sshhmm__oovveerrvviieeww(7), ssvviippcc(7)

CCOOLLOOPPHHOONN
       This page is part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A description  of
       the  project, information about reporting bugs, and the latest version of this page,
       can be found at https://www.kernel.org/doc/man-pages/.

Linux                                    2017-09-15                                SHMOP(2)
